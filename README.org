


#+TITLE:  Aprenent Python 
#+AUTHOR: Alfons i Angel
#+DATE:   29.04.2019

#+STARTUP: indent, latexpreview, inlineimages
#+LANGUAGE: ca
#+DESCRIPTION: Bitàcora d'aprenentatge de Python
#+KEYWORDS: python

[[Python 01 - Inici]]
[[Python 02 - Introducció]]
[[Python 03 - Sintaxi Bàsica I]]
[[Python 04 - Sintaxi Bàsic II: Tipus, operadors i variables]]
[[Python 05 - Sintaxis Bàsica III: Funcions]]
[[Python 06 - Sintaxi Bàsica IV: Funcions II]]
[[Python 07 - Sintaxi Bàsica V: Llistes]]
[[Python 08 - Sintaxi Bàsica VI: Tuples]]
[[Python 09 - Sintaxi Bàsica VII: Diccionaris]]
[[Python 10 - Condicionals I]]
[[Python 11 - Condicionals II]]
[[Python 12 - Condicionals III]]
[[Python 13 - Condicionals IV]]
[[Python 14 - Bucles I]]
[[Python 15 - Bucles II]]


* Python 01 - Inici
[[https://www.youtube.com/watch?v=G2FCfQj-9ig][http://img.youtube.com/vi/G2FCfQj-9ig/0.jpg]]
** Continguts
  - Introducció. Requisits previs i instal·lació de software.
  - Fundaments i sintaxi bàsica del llenguatge.
  - POO (Programació Orientada a Objectes) amb Python.
  - Algoritmes, llistes i trams.
  - BBDD (Bases de Dades).
  - Trebalamb gràfics i contingut.
  - Processos i tasques.
  - Programació de xarxa. Sockets.
  - Exercicis pràctics.
* Python 02 - Introducció
[[https://www.youtube.com/watch?v=9ojhJsXNWCI][http://img.youtube.com/vi/9ojhJsXNWCI/0.jpg]]
** Continguts
  - Història i característiques que Python
    - Creat per Guido Val Rossum a començaments dels 80
    - Llenguatge d'alt nivell
    - Gramàtica senzilla, clara, molt llegible
    - Tipat dinàmic i fort
    - Orientat a objectes
      - Sobrecàrrega de constructors
      - Herència múltiple
      - Encapsulació
      - Interfaces
      - Polimorfisme
    - Open Source
    - Fàcil d'aprendre
    - Llibreria estándard molt ampla
    - Interpretado
    - Versàtil
  - Requisits hardware i instal·lació de Python
  - IDE a utilitzar

* Python 03 - Sintaxi Bàsica I
[[https://www.youtube.com/watch?v=yppT6GPZMyo][http://img.youtube.com/vi/yppT6GPZMyo/0.jpg]]
** Continguts
  - IDLE Python
  - Primeres instruccions en Python
  - Intal·lació SublimeText3
* Python 04 - Sintaxi Bàsic II: Tipus, operadors i variables
[[https://www.youtube.com/watch?v=u4I9PqhqCo8][http://img.youtube.com/vi/u4I9PqhqCo8/0.jpg]]
** Continguts
  - Tipus
    - Numèrics
      - Enters (int)
      - Coma flotant (float)
      - Complexes
    - Text
    - Booleans
      - Vertader (True)
      - Fals (False)
  - Operadors
    - Aritmètics
      - Suma (+)
      - Resta (-)
      - Multiplicació (*)
      - Divisió (/)
      - Mòdul (%)
      - Exponent (**)
      - Divisió sensera (//)
    - Comparació
      - Igual que (==)
      - Diferent que (|=)
      - Major que (>)
      - Menor que (<)
      - Major o igual que (>=)
      - Menor o igual que (<=)
    - Lògics
      - AND
      - OR
      - NOT
    - Assignació
      - Igual (=)
      - Increment (+=), (*=), (**=)
      - Decrement (-=), (/=), (//=)
    - Especials
      - IS
      - IS NOT
      - IN
      - IN NOT
  - Variables: espai en memòria de l'ordindor on es magatzemarà un valor que podrà canviar durant l'execució del programa.
** Sintaxi
Exemple per saber el tipus de variable:

  #+BEGIN_SRC python
  >>> nombre = 5
  >>> type(nombre)
  <type 'int'>
  >>> nombre = "Joan"
  >>> type(nombre)
  <type 'str'>
  >>> nombre = 5.2
  >>> type(nombre)
  <type 'float'>
  #+END_SRC

Utilizarem """ per tal d'escriure diverses línies seguides

  #+BEGIN_SRC python
  >>> misstge = """Això és un missatge
  ... amb tres salts
  ... de línia"""
  #+END_SRC

Ara el podem cridar i imprimir per pantalla

  #+BEGIN_SRC python
  >>> print(missatge)
  Això és un missatge
  amb tres salts
  de línia
  #+END_SRC

Sentència ~if...else~

  #+BEGIN_SRC python
  >>> numero1 = 5
  >>> numero2 = 7
  >>> if numero1>numero2:
  ...  print("El numero 1 es major")
  ... else:
  ...  print("El numero 2 es major")
  ...
  El numero 2 es major
  #+END_SRC

* Python 05 - Sintaxis Bàsica III: Funcions
[[https://www.youtube.com/watch?v=VY448UWAQ_0][http://img.youtube.com/vi/VY448UWAQ_0/0.jpg]]
** Continguts
  - Definició
    - Conjunt de línies de còdi agrupades (bloc de codi) què funcionen com una unitat realitzant una tasca específica.
    - Les funcions, en Python poden tornar valors.
    - Les funcions en Python poen tenir paràmetres/arguments.
    - A les funcion també se les denomina 'mètodes' quan es troben definides dins d'un classe.
  - Utilitat
    - Reutilització del codi (quan siga necessari o si és necessari)
  - Sintaxi
    - ~def nom_funcio()~
      - Instruccions de la funció
      - return (opcional)
    - ~def nom_funcio(parametres)~
      - Instruccions de la funció
      - return (opcional)
  - Execució
    - ~nom_funcio()~
    - ~nom_funcio(parametres)~

** Sintaxi
Declarem la funció:

#+BEGIN_SRC python
  def missatge()
    print("Missatge 1")
    print("Missatge 2")
    print("Missatge 3")
#+END_SRC


Cridem l funció:

#+BEGIN_SRC python
missatge()
#+END_SRC

* Python 06 - Sintaxi Bàsica IV: Funcions II
[[https://www.youtube.com/watch?v=vawEHhV_HFA][http://img.youtube.com/vi/vawEHhV_HFA/0.jpg]]
** Continguts
  - Pas de paràmetres
** Sintaxi
#+BEGIN_SRC python
  def suma(num1, num2)

    resultat=num1+num2

    return resultat

   magatzema_resultat = suma (5,8)

   print(magatzema_resultat)

#+END_SRC

* Python 07 - Sintaxi Bàsica V: Llistes
[[https://www.youtube.com/watch?v=Q8hugySbLQQ][http://img.youtube.com/vi/Q8hugySbLQQ/0.jpg]]
** Continguts
  - Definició
    - Estructura de dades que ens permet magatzemas gran quantitat de valors (equivalent als arrays en altres llenguatges de programació).
    - En Python les llistes poden guardar diferents tipus de valoras (en altres llenguates no ocorre això amb els arrays.
    - Es poden expandir dinàmicament afegint nous elements (altra novetat respecte als arrays en altres llenguatges).
  - Sintaxi
    - Entre corxets.

** Sintaxi

#+BEGIN_SRC python
nombreLlista=[elem1, elem2, elem3...]
#+END_SRC

Operadors relacionats amb llistes
  - ~append~: afegix
  - ~insert~: inserta
  - ~expand~: expandeix, concatena una altra llista
  - ~remove~
  - ~pop~
* Python 08 - Sintaxi Bàsica VI: Tuples
[[https://www.youtube.com/watch?v=Ufqh8aoR9hE][http://img.youtube.com/vi/Ufqh8aoR9hE/0.jpg]]

** Continguts
- Definició
  - Les tuples són inmutables, no es poden modificar després de la seua creació
    - No pememten afegir, eliminar, moure elements, etc. (no append, exend, remove)
    - Si permenten extrarues proporcions, però el resultat de l'extracció és una tubla nova
    - No permeten cerques (no index)
    - Si permeten comprobar si un element es troba en una tupla
  - Quina utilitat o avantatge tenen respecte a les llistes?
    - Més rapides
    - Menys espai (major optimització)
    - Formatege Strings
    - Poden utilitzar-se com claus en un diccionari, les llistes no
** Sintaxi
  - Entre parèntesi

** Codi

#+BEGIN_SRC python
  tupla=("Joan", 13, 1, 1995)
  tupla(tupla)
#+END_SRC

Altres operadors:
  - *in*
  - *count*
  - *len*

* Python 09 - Sintaxi Bàsica VII: Diccionaris
[[https://www.youtube.com/watch?v=2OmgHl8lp0I][http://img.youtube.com/vi/2OmgHl8lp0I/0.jpg]]
** Continguts
- Definció
  - Estructura de dades que ens permet magatzemar valos de fiferent tipus (sensers, cadenes de text, decimals) e inclús llistes i altres diccionaris.
  - La principal característica dels diccionaris és que les dades es magatzemen associades a una clau què crea una associació *clau:valor* per cada element magatzemat
  - Els elements magatzemats no estan ordenats. L'ordre es diferent a l'hora d'emmagatzemar la informació en un diccionari
** Sintaxi

Exemple de diccionari:

#+BEGIN_SRC python
  diccionari={"alemanya":"Berlín", "França":"París", "Regne Unit":"Londres"}
#+END_SRC

Cridem el diccionari

#+BEGIN_SRC python
pint(diccionari)
#+END_SRC
  
Operadors relacionats:
  - *keys*
  - *values*
  - *len*
* Python 10 - Condicionals I
[[https://www.youtube.com/watch?v=iV-4F0jGWak][http://img.youtube.com/vi/iV-4F0jGWak/0.jpg]]
** Continguts
  - ~if~
** Sintaxi
#+BEGIN_SRC python
 def avaluacio(nota):
    valoraci="aprovat"
    if nota < 5:
      valoracio="suspens"
    return

  print(avaluacio(4))
 #+END_SRC

Per introduir els valoras a la terminal:

#+BEGIN_SRC python
  nota_alumne=input()  
#+END_SRC

Convertim el valor a nombre senser:

#+BEGIN_SRC python
  int(nota_alumne)
#+END_SRC

Axí quedaria:

#+BEGIN_SRC python
  nota_alumne=input()  

  def avaluacio(nota):
    valoraci="aprovat"
    if nota < 5:
      valoracio="suspens"
    return
  print(avaluacio(int(nota_alumne)))

#+END_SRC

* Python 11 - Condicionals II
[[https://www.youtube.com/watch?v=cf7o4s9nFu8][http://img.youtube.com/vi/cf7o4s9nFu8/0.jpg]]
** Continguts
- Instrucció ~if~
- Instrucció ~else~ i ~elif~

Interpretació:
  - ~if~: si
  - ~elif~: i sin no és veritat...
  - ~else~: en cas contrari
** Sintaxi
#+BEGIN_SRC python
  print("Verificació d'accés")

  edat_usuari=int(input("Introdueix la teua edat"))

  if edat_usuari>17:
    print("No pots passar")
  elif edat usuari<100:
    print("Edat incorrecta")
  else:
    print("Pots passar")
#+END_SRC

* Python 12 - Condicionals III
[[https://www.youtube.com/watch?v=qxgEolsC6rg][http://img.youtube.com/vi/qxgEolsC6rg/0.jpg]]
** Continguts
- Concatenació d'operadors de comparació
- Operadors lògics ~and~ i ~or~
- Operador ~in~
* Python 13 - Condicionals IV
[[https://www.youtube.com/watch?v=rDGsWYnQEJY][http://img.youtube.com/vi/rDGsWYnQEJY/0.jpg]]
** Continguts
Explicació amb:
  - ~lower()~
  - ~upper()~
* Python 14 - Bucles I
[[https://www.youtube.com/watch?v=GQGhU1526Oo][http://img.youtube.com/vi/GQGhU1526Oo/0.jpg]]
** Continguts
  - ~for~
  - Bucles Determinats
    - S'executen un nombre determinat de vegades
    - Es sap a priori quantes vegades es va a executar el codi de l'interior del bucle
  - Bucles Indeterminats
    - S'executen un nombre indeterminat de vegades
    - No es sap a priori quantes vegades es va a executar el codi de l'interior del bucle
    - El nombre de vegades que s'executarà dependrà de les circumstàncies durant l'execució del programa
** Sintaxi
#+BEGIN_SRC python
  for i in [1,2,3]:
    print("Hola")
#+END_SRC

Aquest codi dóna:

#+BEGIN_SRC 
  Hola
  Hola
  Hola
#+END_SRC

Per tal què recòrrega la llista:

#+BEGIN_SRC python
  for i in ["primavera","estiu","tardor","hivern"]
    print(i)
#+END_SRC

Aquest codi dóna:

#+BEGIN_SRC 
  primavera
  estiu
  tardor
  hivern
#+END_SRC
 
* Python 15 - Bucles II
[[https://www.youtube.com/watch?v=D416qOEDrhI][http://img.youtube.com/vi/D416qOEDrhI/0.jpg]]
** Continguts
  - Bucle ~for~
    - Recorrent strings
    - Tipus ~range~
    - Notacions especials amb ~print~

Explicació de validació d'informació com, per exemple, email.
* Python 16 - Bucles III
** Continguts
  - Bucle ~for~
    - Tipus ~range~
    - Notacions especials amb ~print~

#+BEGIN_SRC python
# range
for i in range(5):
    print(i)
#+END_SRC

Aquest codi dóna:

#+BEGIN_SRC
0
1
2
3
4
#+END_SRC
* Python 17 - Bucles IV
[[https://www.youtube.com/watch?v=UfUM6uzl5SM][http://img.youtube.com/vi/UfUM6uzl5SM/0.jpg]]

Codi 1

```python
edat = int(input("Introdueix la teua edat: "))

while edat < 5 or edat > 100:
    print("Has introduit una edat incorrecta, torna a intentar-ho")
    edat = int(input("Introdueix la teua edat per favor: "))

print("Gràcies per col·laborar.")
print("Edat de l'alumne " + str(edat))
```

Codi 2

```python
print("Programa de càlcul d'arrel quadrada")
numero = int(input("Introdueix el nombre: "))

intents = 0

while nombre < 0:
    print("No es pot hallar l'arrel d'un nombre negatiu")

    if intents == 2:
        print("Has provat massa vegades. El programa ha finalitzat")
	break;

    nombre = int(input("Introdueix el nombre: "))
    if nombre = 0:
        intents = intents+1

    if intents < 2:
        solution = math.sqrt(nombre)
	print("L'arrel quadrada de " + str(nombre) + " és " + str(solution))
```
